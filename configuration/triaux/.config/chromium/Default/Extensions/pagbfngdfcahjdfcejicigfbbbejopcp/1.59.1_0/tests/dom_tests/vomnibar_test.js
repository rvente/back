// Generated by CoffeeScript 1.12.5
(function() {
  var vomnibarFrame;

  vomnibarFrame = null;

  Vomnibar.init();

  context("Keep selection within bounds", setup(function() {
    var oldGetCompleter;
    this.completions = [];
    vomnibarFrame = Vomnibar.vomnibarUI.iframeElement.contentWindow;
    vomnibarFrame.Function.prototype.bind = Function.prototype.bind;
    vomnibarFrame.chrome = chrome;
    oldGetCompleter = vomnibarFrame.Vomnibar.getCompleter.bind(vomnibarFrame.Vomnibar);
    stub(vomnibarFrame.Vomnibar, 'getCompleter', (function(_this) {
      return function(name) {
        var completer;
        completer = oldGetCompleter(name);
        stub(completer, 'filter', function(arg) {
          var callback;
          callback = arg.callback;
          return callback({
            results: _this.completions
          });
        });
        return completer;
      };
    })(this));
    stub(Vomnibar.vomnibarUI, "hide", function() {});
    stub(Vomnibar.vomnibarUI, "postMessage", function(data) {
      return vomnibarFrame.UIComponentServer.handleMessage({
        data: data
      });
    });
    return stub(vomnibarFrame.UIComponentServer, "postMessage", function(data) {
      return UIComponent.handleMessage({
        data: data
      });
    });
  }), tearDown(function() {
    return Vomnibar.vomnibarUI.hide();
  }), should("set selection to position -1 for omni completion by default", function() {
    var ui;
    Vomnibar.activate(0, {
      options: {}
    });
    ui = vomnibarFrame.Vomnibar.vomnibarUI;
    this.completions = [];
    ui.update(true);
    assert.equal(-1, ui.selection);
    this.completions = [
      {
        html: 'foo',
        type: 'tab',
        url: 'http://example.com'
      }
    ];
    ui.update(true);
    assert.equal(-1, ui.selection);
    this.completions = [];
    ui.update(true);
    return assert.equal(-1, ui.selection);
  }), should("set selection to position 0 for bookmark completion if possible", function() {
    var ui;
    Vomnibar.activateBookmarks();
    ui = vomnibarFrame.Vomnibar.vomnibarUI;
    this.completions = [];
    ui.update(true);
    assert.equal(-1, ui.selection);
    this.completions = [
      {
        html: 'foo',
        type: 'bookmark',
        url: 'http://example.com'
      }
    ];
    ui.update(true);
    assert.equal(0, ui.selection);
    this.completions = [];
    ui.update(true);
    return assert.equal(-1, ui.selection);
  }), should("keep selection within bounds", function() {
    var eventMock, ui;
    Vomnibar.activate(0, {
      options: {}
    });
    ui = vomnibarFrame.Vomnibar.vomnibarUI;
    this.completions = [];
    ui.update(true);
    eventMock = {
      preventDefault: function() {},
      stopImmediatePropagation: function() {}
    };
    this.completions = [
      {
        html: 'foo',
        type: 'tab',
        url: 'http://example.com'
      }
    ];
    ui.update(true);
    stub(ui, "actionFromKeyEvent", function() {
      return "down";
    });
    ui.onKeydown(eventMock);
    assert.equal(0, ui.selection);
    this.completions = [];
    ui.update(true);
    return assert.equal(-1, ui.selection);
  }));

}).call(this);
