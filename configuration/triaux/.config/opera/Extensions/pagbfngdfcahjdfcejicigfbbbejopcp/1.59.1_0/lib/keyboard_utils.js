// Generated by CoffeeScript 1.12.5
(function() {
  var KeyboardUtils, mapKeyRegistry, root,
    slice = [].slice;

  mapKeyRegistry = {};

  if (typeof Utils !== "undefined" && Utils !== null) {
    Utils.monitorChromeStorage("mapKeyRegistry", (function(_this) {
      return function(value) {
        return mapKeyRegistry = value;
      };
    })(this));
  }

  KeyboardUtils = {
    keyNames: {
      "ArrowLeft": "left",
      "ArrowUp": "up",
      "ArrowRight": "right",
      "ArrowDown": "down",
      " ": "space",
      "Backspace": "backspace"
    },
    init: function() {
      if (navigator.userAgent.indexOf("Mac") !== -1) {
        return this.platform = "Mac";
      } else if (navigator.userAgent.indexOf("Linux") !== -1) {
        return this.platform = "Linux";
      } else {
        return this.platform = "Windows";
      }
    },
    getKeyChar: function(event) {
      var ref, ref1;
      if (event.key in this.keyNames) {
        return this.keyNames[event.key];
      } else if (event.key == null) {
        return "";
      } else if (event.key.length === 1) {
        return event.key;
      } else if (event.key.length === 2 && ("F1" <= (ref = event.key) && ref <= "F9")) {
        return event.key.toLowerCase();
      } else if (event.key.length === 3 && ("F10" <= (ref1 = event.key) && ref1 <= "F12")) {
        return event.key.toLowerCase();
      } else {
        return "";
      }
    },
    getKeyCharString: function(event) {
      var keyChar, modifiers, ref;
      if (keyChar = this.getKeyChar(event)) {
        modifiers = [];
        if (event.shiftKey && keyChar.length === 1) {
          keyChar = keyChar.toUpperCase();
        }
        if (event.altKey) {
          modifiers.push("a");
        }
        if (event.ctrlKey) {
          modifiers.push("c");
        }
        if (event.metaKey) {
          modifiers.push("m");
        }
        keyChar = slice.call(modifiers).concat([keyChar]).join("-");
        if (1 < keyChar.length) {
          keyChar = "<" + keyChar + ">";
        }
        keyChar = (ref = mapKeyRegistry[keyChar]) != null ? ref : keyChar;
        return keyChar;
      }
    },
    isEscape: function(event) {
      return event.key === "Escape" || this.getKeyCharString(event) === "<c-[>";
    },
    isBackspace: function(event) {
      var ref;
      return (ref = event.key) === "Backspace" || ref === "Delete";
    },
    isPrintable: function(event) {
      var keyChar;
      if (event.metaKey || event.ctrlKey || event.altKey) {
        return false;
      }
      keyChar = event.type === "keypress" ? String.fromCharCode(event.charCode) : this.getKeyChar(event);
      return keyChar.length === 1;
    }
  };

  KeyboardUtils.init();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.KeyboardUtils = KeyboardUtils;

}).call(this);
