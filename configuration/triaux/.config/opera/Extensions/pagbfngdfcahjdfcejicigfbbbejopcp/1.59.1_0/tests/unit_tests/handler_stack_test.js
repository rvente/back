// Generated by CoffeeScript 1.12.5
(function() {
  require("./test_helper.js");

  extend(global, require("../../lib/handler_stack.js"));

  context("handlerStack", setup(function() {
    stub(global, "DomUtils", {});
    stub(DomUtils, "suppressEvent", function() {});
    stub(DomUtils, "suppressPropagation", function() {});
    this.handlerStack = new HandlerStack;
    this.handler1Called = false;
    return this.handler2Called = false;
  }), should("bubble events", function() {
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler2Called = true;
        };
      })(this)
    });
    this.handlerStack.bubbleEvent('keydown', {});
    assert.isTrue(this.handler2Called);
    return assert.isTrue(this.handler1Called);
  }), should("terminate bubbling on falsy return value", function() {
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          _this.handler2Called = true;
          return false;
        };
      })(this)
    });
    this.handlerStack.bubbleEvent('keydown', {});
    assert.isTrue(this.handler2Called);
    return assert.isFalse(this.handler1Called);
  }), should("terminate bubbling on passEventToPage, and be true", function() {
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          _this.handler2Called = true;
          return _this.handlerStack.passEventToPage;
        };
      })(this)
    });
    assert.isTrue(this.handlerStack.bubbleEvent('keydown', {}));
    assert.isTrue(this.handler2Called);
    return assert.isFalse(this.handler1Called);
  }), should("terminate bubbling on passEventToPage, and be false", function() {
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          _this.handler2Called = true;
          return _this.handlerStack.suppressPropagation;
        };
      })(this)
    });
    assert.isFalse(this.handlerStack.bubbleEvent('keydown', {}));
    assert.isTrue(this.handler2Called);
    return assert.isFalse(this.handler1Called);
  }), should("restart bubbling on restartBubbling", function() {
    var id;
    this.handler1Called = 0;
    this.handler2Called = 0;
    id = this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          _this.handler1Called++;
          _this.handlerStack.remove(id);
          return _this.handlerStack.restartBubbling;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          _this.handler2Called++;
          return true;
        };
      })(this)
    });
    assert.isTrue(this.handlerStack.bubbleEvent('keydown', {}));
    assert.isTrue(this.handler1Called === 1);
    return assert.isTrue(this.handler2Called === 2);
  }), should("remove handlers correctly", function() {
    var handlerId;
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    handlerId = this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler2Called = true;
        };
      })(this)
    });
    this.handlerStack.remove(handlerId);
    this.handlerStack.bubbleEvent('keydown', {});
    assert.isFalse(this.handler2Called);
    return assert.isTrue(this.handler1Called);
  }), should("remove handlers correctly", function() {
    var handlerId;
    handlerId = this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler2Called = true;
        };
      })(this)
    });
    this.handlerStack.remove(handlerId);
    this.handlerStack.bubbleEvent('keydown', {});
    assert.isTrue(this.handler2Called);
    return assert.isFalse(this.handler1Called);
  }), should("handle self-removing handlers correctly", function() {
    var ctx;
    ctx = this;
    this.handlerStack.push({
      keydown: (function(_this) {
        return function() {
          return _this.handler1Called = true;
        };
      })(this)
    });
    this.handlerStack.push({
      keydown: function() {
        ctx.handler2Called = true;
        return this.remove();
      }
    });
    this.handlerStack.bubbleEvent('keydown', {});
    assert.isTrue(this.handler2Called);
    assert.isTrue(this.handler1Called);
    return assert.equal(this.handlerStack.stack.length, 1);
  }));

}).call(this);
