// Generated by CoffeeScript 1.12.5
(function() {
  require("./test_helper.js");

  extend(global, require("../../lib/rect.js"));

  context("Rect", should("set rect properties correctly", function() {
    var rect, ref, x1, x2, y1, y2;
    ref = [1, 2, 3, 4], x1 = ref[0], y1 = ref[1], x2 = ref[2], y2 = ref[3];
    rect = Rect.create(x1, y1, x2, y2);
    assert.equal(rect.left, x1);
    assert.equal(rect.top, y1);
    assert.equal(rect.right, x2);
    assert.equal(rect.bottom, y2);
    assert.equal(rect.width, x2 - x1);
    return assert.equal(rect.height, y2 - y1);
  }), should("translate rect horizontally", function() {
    var rect1, rect2, ref, x, x1, x2, y1, y2;
    ref = [1, 2, 3, 4], x1 = ref[0], y1 = ref[1], x2 = ref[2], y2 = ref[3];
    x = 5;
    rect1 = Rect.create(x1, y1, x2, y2);
    rect2 = Rect.translate(rect1, x);
    assert.equal(rect1.left + x, rect2.left);
    assert.equal(rect1.right + x, rect2.right);
    assert.equal(rect1.width, rect2.width);
    assert.equal(rect1.height, rect2.height);
    assert.equal(rect1.top, rect2.top);
    return assert.equal(rect1.bottom, rect2.bottom);
  }), should("translate rect vertically", function() {
    var rect1, rect2, ref, x1, x2, y, y1, y2;
    ref = [1, 2, 3, 4], x1 = ref[0], y1 = ref[1], x2 = ref[2], y2 = ref[3];
    y = 5;
    rect1 = Rect.create(x1, y1, x2, y2);
    rect2 = Rect.translate(rect1, void 0, y);
    assert.equal(rect1.top + y, rect2.top);
    assert.equal(rect1.bottom + y, rect2.bottom);
    assert.equal(rect1.width, rect2.width);
    assert.equal(rect1.height, rect2.height);
    assert.equal(rect1.left, rect2.left);
    return assert.equal(rect1.right, rect2.right);
  }));

  context("Rect subtraction", context("unchanged by rects outside", should("left, above", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(-2, -2, -1, -1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("left", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(-2, 0, -1, 1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("left, below", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(-2, 2, -1, 3);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("right, above", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(2, -2, 3, -1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("right", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(2, 0, 3, 1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("right, below", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(2, 2, 3, 3);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("above", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(0, -2, 1, -1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("below", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(0, 2, 1, 3);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  })), context("unchanged by rects touching", should("left, above", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(-1, -1, 0, 0);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("left", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(-1, 0, 0, 1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("left, below", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(-1, 1, 0, 2);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("right, above", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(1, -1, 2, 0);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("right", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(1, 0, 2, 1);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("right, below", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(1, 1, 2, 2);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("above", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(0, -1, 1, 0);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  }), should("below", function() {
    var rect, rect1, rect2, rects;
    rect1 = Rect.create(0, 0, 1, 1);
    rect2 = Rect.create(0, 1, 1, 2);
    rects = Rect.subtract(rect1, rect2);
    assert.equal(rects.length, 1);
    rect = rects[0];
    return assert.isTrue(Rect.equals(rect1, rect));
  })), should("have nothing when subtracting itself", function() {
    var rect, rects;
    rect = Rect.create(0, 0, 1, 1);
    rects = Rect.subtract(rect, rect);
    return assert.equal(rects.length, 0);
  }), should("not overlap subtracted rect", function() {
    var height, i, rect, resultRect, resultRects, results, subtractRect, width, x, y;
    rect = Rect.create(0, 0, 3, 3);
    results = [];
    for (x = i = -2; i <= 2; x = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (y = j = -2; j <= 2; y = ++j) {
          results1.push((function() {
            var k, results2;
            results2 = [];
            for (width = k = 1; k <= 3; width = ++k) {
              results2.push((function() {
                var l, results3;
                results3 = [];
                for (height = l = 1; l <= 3; height = ++l) {
                  subtractRect = Rect.create(x, y, x + width, y + height);
                  resultRects = Rect.subtract(rect, subtractRect);
                  results3.push((function() {
                    var len, m, results4;
                    results4 = [];
                    for (m = 0, len = resultRects.length; m < len; m++) {
                      resultRect = resultRects[m];
                      results4.push(assert.isFalse(Rect.contains(subtractRect, resultRect)));
                    }
                    return results4;
                  })());
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  }), should("be contained in original rect", function() {
    var height, i, rect, resultRect, resultRects, results, subtractRect, width, x, y;
    rect = Rect.create(0, 0, 3, 3);
    results = [];
    for (x = i = -2; i <= 2; x = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (y = j = -2; j <= 2; y = ++j) {
          results1.push((function() {
            var k, results2;
            results2 = [];
            for (width = k = 1; k <= 3; width = ++k) {
              results2.push((function() {
                var l, results3;
                results3 = [];
                for (height = l = 1; l <= 3; height = ++l) {
                  subtractRect = Rect.create(x, y, x + width, y + height);
                  resultRects = Rect.subtract(rect, subtractRect);
                  results3.push((function() {
                    var len, m, results4;
                    results4 = [];
                    for (m = 0, len = resultRects.length; m < len; m++) {
                      resultRect = resultRects[m];
                      results4.push(assert.isTrue(Rect.contains(rect, resultRect)));
                    }
                    return results4;
                  })());
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  }), should("contain the  subtracted rect in the original minus the results", function() {
    var complementRect, height, i, rect, resultComplement, resultRect, resultRects, results, subtractRect, width, x, y;
    rect = Rect.create(0, 0, 3, 3);
    results = [];
    for (x = i = -2; i <= 2; x = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (y = j = -2; j <= 2; y = ++j) {
          results1.push((function() {
            var k, results2;
            results2 = [];
            for (width = k = 1; k <= 3; width = ++k) {
              results2.push((function() {
                var l, len, m, results3;
                results3 = [];
                for (height = l = 1; l <= 3; height = ++l) {
                  subtractRect = Rect.create(x, y, x + width, y + height);
                  resultRects = Rect.subtract(rect, subtractRect);
                  resultComplement = [Rect.copy(rect)];
                  for (m = 0, len = resultRects.length; m < len; m++) {
                    resultRect = resultRects[m];
                    resultComplement = Array.prototype.concat.apply([], resultComplement.map(function(rect) {
                      return Rect.subtract(rect, resultRect);
                    }));
                  }
                  assert.isTrue(resultComplement.length === 0 || resultComplement.length === 1);
                  if (resultComplement.length === 1) {
                    complementRect = resultComplement[0];
                    results3.push(assert.isTrue(Rect.contains(subtractRect, complementRect)));
                  } else {
                    results3.push(void 0);
                  }
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  }));

  context("Rect overlaps", should("detect that a rect overlaps itself", function() {
    var rect;
    rect = Rect.create(2, 2, 4, 4);
    return assert.isTrue(Rect.rectsOverlap(rect, rect));
  }), should("detect that non-overlapping rectangles do not overlap on the left", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(0, 2, 1, 4);
    return assert.isFalse(Rect.rectsOverlap(rect1, rect2));
  }), should("detect that non-overlapping rectangles do not overlap on the right", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(5, 2, 6, 4);
    return assert.isFalse(Rect.rectsOverlap(rect1, rect2));
  }), should("detect that non-overlapping rectangles do not overlap on the top", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(2, 0, 2, 1);
    return assert.isFalse(Rect.rectsOverlap(rect1, rect2));
  }), should("detect that non-overlapping rectangles do not overlap on the bottom", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(2, 5, 2, 6);
    return assert.isFalse(Rect.rectsOverlap(rect1, rect2));
  }), should("detect overlapping rectangles on the left", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(0, 2, 2, 4);
    return assert.isTrue(Rect.rectsOverlap(rect1, rect2));
  }), should("detect overlapping rectangles on the right", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(4, 2, 5, 4);
    return assert.isTrue(Rect.rectsOverlap(rect1, rect2));
  }), should("detect overlapping rectangles on the top", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(2, 4, 4, 5);
    return assert.isTrue(Rect.rectsOverlap(rect1, rect2));
  }), should("detect overlapping rectangles on the bottom", function() {
    var rect1, rect2;
    rect1 = Rect.create(2, 2, 4, 4);
    rect2 = Rect.create(2, 0, 4, 2);
    return assert.isTrue(Rect.rectsOverlap(rect1, rect2));
  }), should("detect overlapping rectangles when second rectangle is contained in first", function() {
    var rect1, rect2;
    rect1 = Rect.create(1, 1, 4, 4);
    rect2 = Rect.create(2, 2, 3, 3);
    return assert.isTrue(Rect.rectsOverlap(rect1, rect2));
  }), should("detect overlapping rectangles when first rectangle is contained in second", function() {
    var rect1, rect2;
    rect1 = Rect.create(1, 1, 4, 4);
    rect2 = Rect.create(2, 2, 3, 3);
    return assert.isTrue(Rect.rectsOverlap(rect2, rect1));
  }));

}).call(this);
