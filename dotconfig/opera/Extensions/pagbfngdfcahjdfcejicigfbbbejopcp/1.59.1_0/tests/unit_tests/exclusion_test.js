// Generated by CoffeeScript 1.12.5
(function() {
  var isEnabledForUrl;

  require("./test_helper.js");

  extend(global, require("./test_chrome_stubs.js"));

  root.Marks = {
    create: function() {
      return true;
    },
    goto: {
      bind: function() {
        return true;
      }
    }
  };

  extend(global, require("../../lib/utils.js"));

  Utils.getCurrentVersion = function() {
    return '1.44';
  };

  extend(global, require("../../lib/settings.js"));

  extend(global, require("../../lib/clipboard.js"));

  extend(global, require("../../background_scripts/bg_utils.js"));

  extend(global, require("../../background_scripts/exclusions.js"));

  extend(global, require("../../background_scripts/commands.js"));

  extend(global, require("../../background_scripts/main.js"));

  isEnabledForUrl = function(request) {
    return Exclusions.isEnabledForUrl(request.url);
  };

  context("Excluded URLs and pass keys", setup(function() {
    return Exclusions.postUpdateHook([
      {
        pattern: "http*://mail.google.com/*",
        passKeys: ""
      }, {
        pattern: "http*://www.facebook.com/*",
        passKeys: "abab"
      }, {
        pattern: "http*://www.facebook.com/*",
        passKeys: "cdcd"
      }, {
        pattern: "http*://www.bbc.com/*",
        passKeys: ""
      }, {
        pattern: "http*://www.bbc.com/*",
        passKeys: "ab"
      }, {
        pattern: "http*://www.example.com/*",
        passKeys: "a bb c bba a"
      }, {
        pattern: "http*://www.duplicate.com/*",
        passKeys: "ace"
      }, {
        pattern: "http*://www.duplicate.com/*",
        passKeys: "bdf"
      }
    ]);
  }), should("be disabled for excluded sites", function() {
    var rule;
    rule = isEnabledForUrl({
      url: 'http://mail.google.com/calendar/page'
    });
    assert.isFalse(rule.isEnabledForUrl);
    return assert.isFalse(rule.passKeys);
  }), should("be disabled for excluded sites, one exclusion", function() {
    var rule;
    rule = isEnabledForUrl({
      url: 'http://www.bbc.com/calendar/page'
    });
    assert.isFalse(rule.isEnabledForUrl);
    return assert.isFalse(rule.passKeys);
  }), should("be enabled, but with pass keys", function() {
    var rule;
    rule = isEnabledForUrl({
      url: 'https://www.facebook.com/something'
    });
    assert.isTrue(rule.isEnabledForUrl);
    return assert.equal(rule.passKeys, 'abcd');
  }), should("be enabled", function() {
    var rule;
    rule = isEnabledForUrl({
      url: 'http://www.twitter.com/pages'
    });
    assert.isTrue(rule.isEnabledForUrl);
    return assert.isFalse(rule.passKeys);
  }), should("handle spaces and duplicates in passkeys", function() {
    var rule;
    rule = isEnabledForUrl({
      url: 'http://www.example.com/pages'
    });
    assert.isTrue(rule.isEnabledForUrl);
    return assert.equal("abc", rule.passKeys);
  }), should("handle multiple passkeys rules", function() {
    var rule;
    rule = isEnabledForUrl({
      url: 'http://www.duplicate.com/pages'
    });
    assert.isTrue(rule.isEnabledForUrl);
    return assert.equal("abcdef", rule.passKeys);
  }), should("be enabled for malformed regular expressions", function() {
    var rule;
    Exclusions.postUpdateHook([
      {
        pattern: "http*://www.bad-regexp.com/*[a-",
        passKeys: ""
      }
    ]);
    rule = isEnabledForUrl({
      url: 'http://www.bad-regexp.com/pages'
    });
    return assert.isTrue(rule.isEnabledForUrl);
  }));

}).call(this);
