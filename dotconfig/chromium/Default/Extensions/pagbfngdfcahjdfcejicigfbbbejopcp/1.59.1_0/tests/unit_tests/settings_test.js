// Generated by CoffeeScript 1.12.5
(function() {
  var hasProp = {}.hasOwnProperty;

  require("./test_helper.js");

  extend(global, require("./test_chrome_stubs.js"));

  extend(global, require("../../lib/utils.js"));

  Utils.getCurrentVersion = function() {
    return '1.44';
  };

  Utils.isBackgroundPage = function() {
    return true;
  };

  Utils.isExtensionPage = function() {
    return true;
  };

  global.localStorage = {};

  extend(global, require("../../lib/settings.js"));

  extend(global, require("../../pages/options.js"));

  context("settings", setup(function() {
    stub(global, 'localStorage', {});
    Settings.cache = global.localStorage;
    return Settings.postUpdateHooks = {};
  }), should("save settings in localStorage as JSONified strings", function() {
    Settings.set('dummy', "");
    return assert.equal(localStorage.dummy, '""');
  }), should("obtain defaults if no key is stored", function() {
    assert.isFalse(Settings.has('scrollStepSize'));
    return assert.equal(Settings.get('scrollStepSize'), 60);
  }), should("store values", function() {
    Settings.set('scrollStepSize', 20);
    return assert.equal(Settings.get('scrollStepSize'), 20);
  }), should("revert to defaults if no key is stored", function() {
    Settings.set('scrollStepSize', 20);
    Settings.clear('scrollStepSize');
    return assert.equal(Settings.get('scrollStepSize'), 60);
  }));

  context("synced settings", setup(function() {
    stub(global, 'localStorage', {});
    Settings.cache = global.localStorage;
    return Settings.postUpdateHooks = {};
  }), should("propagate non-default value via synced storage listener", function() {
    Settings.set('scrollStepSize', 20);
    assert.equal(Settings.get('scrollStepSize'), 20);
    Settings.propagateChangesFromChromeStorage({
      scrollStepSize: {
        newValue: "40"
      }
    });
    return assert.equal(Settings.get('scrollStepSize'), 40);
  }), should("propagate default value via synced storage listener", function() {
    Settings.set('scrollStepSize', 20);
    assert.equal(Settings.get('scrollStepSize'), 20);
    Settings.propagateChangesFromChromeStorage({
      scrollStepSize: {
        newValue: "60"
      }
    });
    return assert.equal(Settings.get('scrollStepSize'), 60);
  }), should("propagate non-default values from synced storage", function() {
    chrome.storage.sync.set({
      scrollStepSize: JSON.stringify(20)
    });
    return assert.equal(Settings.get('scrollStepSize'), 20);
  }), should("propagate default values from synced storage", function() {
    Settings.set('scrollStepSize', 20);
    chrome.storage.sync.set({
      scrollStepSize: JSON.stringify(60)
    });
    return assert.equal(Settings.get('scrollStepSize'), 60);
  }), should("clear a setting from synced storage", function() {
    Settings.set('scrollStepSize', 20);
    chrome.storage.sync.remove('scrollStepSize');
    return assert.equal(Settings.get('scrollStepSize'), 60);
  }), should("trigger a postUpdateHook", function() {
    var message, receivedMessage;
    message = "Hello World";
    receivedMessage = "";
    Settings.postUpdateHooks['scrollStepSize'] = function(value) {
      return receivedMessage = value;
    };
    chrome.storage.sync.set({
      scrollStepSize: JSON.stringify(message)
    });
    return assert.equal(message, receivedMessage);
  }), should("sync a key which is not a known setting (without crashing)", function() {
    return chrome.storage.sync.set({
      notASetting: JSON.stringify("notAUsefullValue")
    });
  }));

  context("default valuess", should("have a default value for every option", function() {
    var key, results;
    results = [];
    for (key in Options) {
      if (!hasProp.call(Options, key)) continue;
      results.push(assert.isTrue(key in Settings.defaults));
    }
    return results;
  }));

}).call(this);
