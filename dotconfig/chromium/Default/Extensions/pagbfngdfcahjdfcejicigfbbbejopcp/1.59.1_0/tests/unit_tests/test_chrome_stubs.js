// Generated by CoffeeScript 1.12.5
(function() {
  var XMLHttpRequest,
    hasProp = {}.hasOwnProperty;

  exports.window = {};

  exports.localStorage = {};

  global.navigator = {
    appVersion: "5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"
  };

  global.document = {
    createElement: function() {
      return {};
    },
    addEventListener: function() {}
  };

  global.XMLHttpRequest = XMLHttpRequest = (function() {
    function XMLHttpRequest() {}

    XMLHttpRequest.prototype.open = function() {};

    XMLHttpRequest.prototype.onload = function() {};

    XMLHttpRequest.prototype.send = function() {};

    return XMLHttpRequest;

  })();

  exports.chrome = {
    areRunningVimiumTests: true,
    runtime: {
      getURL: function() {},
      getManifest: function() {
        return {
          version: "1.2.3"
        };
      },
      onConnect: {
        addListener: function() {
          return true;
        }
      },
      onMessage: {
        addListener: function() {
          return true;
        }
      },
      onInstalled: {
        addListener: function() {}
      }
    },
    extension: {
      getURL: function(path) {
        return path;
      },
      getBackgroundPage: function() {
        return {};
      },
      getViews: function() {
        return [];
      }
    },
    tabs: {
      onUpdated: {
        addListener: function() {
          return true;
        }
      },
      onAttached: {
        addListener: function() {
          return true;
        }
      },
      onMoved: {
        addListener: function() {
          return true;
        }
      },
      onRemoved: {
        addListener: function() {
          return true;
        }
      },
      onActivated: {
        addListener: function() {
          return true;
        }
      },
      onReplaced: {
        addListener: function() {
          return true;
        }
      },
      query: function() {
        return true;
      }
    },
    webNavigation: {
      onHistoryStateUpdated: {
        addListener: function() {}
      },
      onReferenceFragmentUpdated: {
        addListener: function() {}
      }
    },
    windows: {
      onRemoved: {
        addListener: function() {
          return true;
        }
      },
      getAll: function() {
        return true;
      },
      onFocusChanged: {
        addListener: function() {
          return true;
        }
      }
    },
    browserAction: {
      setBadgeBackgroundColor: function() {}
    },
    storage: {
      local: {
        get: function(_, callback) {
          return typeof callback === "function" ? callback() : void 0;
        },
        set: function(_, callback) {
          return typeof callback === "function" ? callback() : void 0;
        },
        remove: function(_, callback) {
          return typeof callback === "function" ? callback() : void 0;
        }
      },
      onChanged: {
        addListener: function(func) {
          return this.func = func;
        },
        call: function(key, value) {
          var key_value;
          chrome.runtime.lastError = void 0;
          key_value = {};
          key_value[key] = {
            newValue: value
          };
          if (this.func) {
            return this.func(key_value, 'sync');
          }
        },
        callEmpty: function(key) {
          var items;
          chrome.runtime.lastError = void 0;
          if (this.func) {
            items = {};
            items[key] = {};
            return this.func(items, 'sync');
          }
        }
      },
      session: {
        MAX_SESSION_RESULTS: 25
      },
      sync: {
        store: {},
        set: function(items, callback) {
          var key, results, value;
          chrome.runtime.lastError = void 0;
          for (key in items) {
            if (!hasProp.call(items, key)) continue;
            value = items[key];
            this.store[key] = value;
          }
          if (callback) {
            callback();
          }
          results = [];
          for (key in items) {
            if (!hasProp.call(items, key)) continue;
            value = items[key];
            results.push(global.chrome.storage.onChanged.call(key, value));
          }
          return results;
        },
        get: function(keys, callback) {
          var i, items, key, len, ref, value;
          chrome.runtime.lastError = void 0;
          if (keys === null) {
            keys = [];
            ref = this.store;
            for (key in ref) {
              if (!hasProp.call(ref, key)) continue;
              value = ref[key];
              keys.push(key);
            }
          }
          items = {};
          for (i = 0, len = keys.length; i < len; i++) {
            key = keys[i];
            items[key] = this.store[key];
          }
          if (callback) {
            return callback(items);
          }
        },
        remove: function(key, callback) {
          chrome.runtime.lastError = void 0;
          if (key in this.store) {
            delete this.store[key];
          }
          if (callback) {
            callback();
          }
          return global.chrome.storage.onChanged.callEmpty(key);
        }
      }
    }
  };

}).call(this);
